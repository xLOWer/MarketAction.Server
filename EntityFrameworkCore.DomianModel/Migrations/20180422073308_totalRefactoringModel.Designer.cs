// <auto-generated />
using MarketAction.Server.EntityFrameworkCore.DomianModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace EntityFrameworkCore.DomianModel.Migrations
{
    [DbContext(typeof(MaDbContext))]
    [Migration("20180422073308_totalRefactoringModel")]
    partial class totalRefactoringModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MarketAction.Server.Model.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime?>("DateActionEnd");

                    b.Property<DateTime?>("DateActionStart");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("LastEditDate");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RemoveDate");

                    b.Property<Guid?>("TradeNetworkId");

                    b.HasKey("Id");

                    b.HasIndex("TradeNetworkId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("MarketAction.Server.Model.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("LastEditDate");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RemoveDate");

                    b.Property<Guid?>("TradeNetworkId");

                    b.HasKey("Id");

                    b.HasIndex("TradeNetworkId");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("MarketAction.Server.Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActionId");

                    b.Property<decimal>("Cost");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("LastEditDate");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RemoveDate");

                    b.Property<decimal?>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("MarketAction.Server.Model.TradeNetwork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("LastEditDate");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("RemoveDate");

                    b.HasKey("Id");

                    b.ToTable("TradeNetworks");
                });

            modelBuilder.Entity("MarketAction.Server.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("LastEditDate");

                    b.Property<DateTime>("LastEntryDate");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("ReadAccessLevels");

                    b.Property<bool>("ReadActions");

                    b.Property<bool>("ReadAll");

                    b.Property<bool>("ReadCatalogues");

                    b.Property<bool>("ReadProducts");

                    b.Property<bool>("ReadTradeNetworks");

                    b.Property<bool>("ReadUsers");

                    b.Property<DateTime?>("RemoveDate");

                    b.Property<bool>("WriteAccessLevels");

                    b.Property<bool>("WriteActions");

                    b.Property<bool>("WriteAll");

                    b.Property<bool>("WriteCatalogues");

                    b.Property<bool>("WriteProducts");

                    b.Property<bool>("WriteTradeNetworks");

                    b.Property<bool>("WriteUsers");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MarketAction.Server.Model.Action", b =>
                {
                    b.HasOne("MarketAction.Server.Model.TradeNetwork", "TradeNetwork")
                        .WithMany("Actions")
                        .HasForeignKey("TradeNetworkId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MarketAction.Server.Model.Market", b =>
                {
                    b.HasOne("MarketAction.Server.Model.TradeNetwork", "TradeNetwork")
                        .WithMany("Markets")
                        .HasForeignKey("TradeNetworkId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MarketAction.Server.Model.Product", b =>
                {
                    b.HasOne("MarketAction.Server.Model.Action", "Action")
                        .WithMany("Products")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
